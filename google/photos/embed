#!/usr/bin/env python3
#
# Copyright 2019 Miklos Vajna
#
# SPDX-License-Identifier: MIT
#

from html.parser import HTMLParser
from typing import List
from typing import Optional
from typing import Tuple
import sys
import urllib.parse
import urllib.request


class MyHTMLParser(HTMLParser):
    def __init__(self) -> None:
        HTMLParser.__init__(self)
        self.url: Optional[str] = None

    def handle_starttag(self, tag: str, attrs: List[Tuple[str, str]]) -> None:
        if tag != "meta":
            return

        attrDict = {}
        for k, v in attrs:
            attrDict[k] = v

        if "property" not in attrDict.keys():
            return

        property = attrDict["property"]
        if property != "og:image":
            return

        if "content" not in attrDict.keys():
            return

        content = attrDict["content"]
        self.url = content


def embed(arg: str) -> None:
    parser = MyHTMLParser()
    sock = urllib.request.urlopen(arg)
    buf = sock.read()
    sock.close()
    parser.feed(buf.decode('utf-8'))
    url = parser.url

    if url is None:
        print("Failed to extract url from Open Graph tags.")
    else:
        tokens = url.split("=w")
        if len(tokens) == 2:
            # So that reusing the images in slides results in high-res images.
            print(tokens[0] + "=w1920")
        else:
            print(url)


if len(sys.argv) > 1:
    embed(sys.argv[1])
else:
    print("usage: embed <link>")
    print()
    print("e.g. embed https://photos.app.goo.gl/2AZwzQUShgiAhioX6")

# vim:set shiftwidth=4 softtabstop=4 expandtab:
