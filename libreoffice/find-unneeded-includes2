#!/usr/bin/env python3
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# This parses the output of include-what-you-use, focusing on just removing not
# needed includes and filtering out a number of LibreOffice-specific false
# positives.
#

import re
import sys


def unwrapInclude(include):
    # Drop <> or "" around the include.
    return include[1:-1]


def getFwdDecl(include, keyword):
    match = re.match("(.*).hpp", include)
    tokens = match.group(1).split("/")
    start = []
    end = []
    forwardDecl = None
    for i in range(len(tokens)):
        if i == len(tokens) - 1:
            forwardDecl = "%s%s %s;%s" % ("".join(start), keyword, tokens[-1], "".join(end))
        else:
            start.append("namespace %s { " % tokens[i])
            end.append(" }")
    return forwardDecl


def ignoreRemoval(include, toAdd):
    # Avoid replacing .hpp with .hdl in the com::sun::star namespace.
    if include.startswith("com/sun/star") and include.endswith(".hpp"):
        hdl = include.replace(".hpp", ".hdl")
        if hdl in toAdd:
            return True

        # Forward declaration case.
        if getFwdDecl(include, "class") in toAdd or getFwdDecl(include, "struct") in toAdd:
            return True

    # rtl::Reference fwd decl case.
    if include == "rtl/ref.hxx" and "namespace rtl { template <class reference_type> class Reference; }" in toAdd:
        return True

    # Avoid debug STL.
    debugStl = {
        "vector": "debug/vector",
        "set": "debug/set.h",
        "map": "debug/map.h"
    }
    for k, v in debugStl.items():
        if include == k and v in toAdd:
            return True

    # Follow boost documentation.
    if include == "boost/optional.hpp" and "boost/optional/optional.hpp" in toAdd:
        return True

    # <https://www.openoffice.org/tools/CodingGuidelines.sxw> insists on not
    # removing this.
    if include == "sal/config.h":
        return True

    return False


def processIWYUOutput(iwyuOutput):
    inAdd = False
    toAdd = []
    inRemove = False
    toRemove = []
    currentFileName = None
    for line in iwyuOutput:
        line = line.strip()

        if len(line) == 0:
            if inRemove:
                inRemove = False
                continue
            if inAdd:
                inAdd = False
                continue

        match = re.match("(.*) should add these lines:$", line)
        if match:
            currrentFileName = match.group(1)
            inAdd = True
            continue

        match = re.match("(.*) should remove these lines:$", line)
        if match:
            currentFileName = match.group(1)
            inRemove = True
            continue

        if inAdd:
            match = re.match('#include ([^ ]+)', line)
            if match:
                include = unwrapInclude(match.group(1))
                toAdd.append(include)
            else:
                # Forward declaration.
                toAdd.append(line)

        if inRemove:
            match = re.match("- #include (.*)  // lines (.*)-.*", line)
            if match:
                include = unwrapInclude(match.group(1))
                lineno = match.group(2)
                if not ignoreRemoval(include, toAdd):
                    toRemove.append("%s:%s: %s" % (currentFileName, lineno, include))
                continue

    for remove in toRemove:
        print("%s: remove not needed include" % remove)
    return min(len(toRemove), 100)

if __name__ == '__main__':
    sys.exit(processIWYUOutput(sys.stdin))

# vim:set shiftwidth=4 softtabstop=4 expandtab:
