= LO clang notes

== Member prefixing effort

There are two modes:

- prefix the first class we hit in a module (this happens when large-scale
  changes are not wanted)
- prefix the largest classes (this happens when large-scale changes are
  welcome)

=== Handling the first non-conforming class in a module

----
make -sr -j8 -O gb_SUPPRESS_TESTS=y FORCE_COMPILE_ALL=1 COMPILER_EXTERNAL_TOOL=1 CCACHE_PREFIX=find-unprefixed-members-wrapper2 RENAME_ARGS="-path-prefix=$PWD -yaml" 2>&1 |tee ~/rename.yaml
----

See below for the rest (clang-rename and clang-apply-replacements invocation).

=== Finding a class with a known name in a module

----
# Touch the header of the relevant class.
make check gb_SUPPRESS_TESTS=y COMPILER_EXTERNAL_TOOL=1 CCACHE_PREFIX=find-unprefixed-members-wrapper2 RENAME_ARGS="-class-name=SwFieldPortion -yaml" 2>&1 |tee ~/rename.yaml
# Touch the header of the relevant class.
make check gb_SUPPRESS_TESTS=y COMPILER_EXTERNAL_TOOL=1 CCACHE_PREFIX=clang-rename-wrapper RENAME_ARGS="-input=$HOME/rename.yaml -force"
clang-apply-replacements -remove-change-desc-files /tmp/rename
----

Building a complete list of non-conforming members for a module:

----
make -k -sr -j8 -O FORCE_COMPILE_ALL=1 COMPILER_EXTERNAL_TOOL=1 CCACHE_PREFIX=find-unprefixed-members-wrapper2 RENAME_ARGS="-path-prefix=$PWD" 2>&1 |grep :: | tee ~/sw-to-prefix.log
----

=== Other examples:

Detect unprefixed members in a whole module:

----
make -sr -j8 COMPILER_EXTERNAL_TOOL=1 CCACHE_PREFIX=find-unprefixed-members-wrapper2 RENAME_ARGS="-class-prefix=Sw" FORCE_COMPILE_ALL=1
----

(The '2' version is the same as the rename wrapper, just s/rename/find-unprefixed-members/.)

Detect unprefixed members for a class:

----
make -sr -j8 COMPILER_EXTERNAL_TOOL=1 CCACHE_PREFIX=find-unprefixed-members-wrapper2 RENAME_ARGS="-class-name=SdrDragView -yaml" 2>&1 |tee ~/rename.yaml
make build-nocheck COMPILER_EXTERNAL_TOOL=1 CCACHE_PREFIX=find-unprefixed-members-wrapper2 RENAME_ARGS="-class-name=SdrDragView"
----

Detect unprefixed members in a directory:

----
make -sr COMPILER_EXTERNAL_TOOL=1 CCACHE_PREFIX=find-unprefixed-members-wrapper2 RENAME_ARGS="-path-prefix=$PWD/source/filter/ww8/rtf"
----

Example `rename.csv` for a member function rename:

----
SdrDragStat::GetPointAnz,GetPointCount
----

Rename them:

----
make -sr -j8 COMPILER_EXTERNAL_TOOL=1 CCACHE_PREFIX=rename-wrapper RENAME_ARGS="-csv=$HOME/rename.csv"
make build-nocheck COMPILER_EXTERNAL_TOOL=1 CCACHE_PREFIX=rename-wrapper RENAME_ARGS="-csv=$HOME/rename.csv"
----

Put output into git:

----
for i in $(find . -name "*.new-rename"); do mv -f $i ${i%%.new-rename}; done
----

== online.git commands

Detect:

----
make -j8 CCACHE_PREFIX=find-unprefixed-members-wrapper2 CCACHE_DISABLE=1 RENAME_ARGS="-poco -class-excluded-prefix=std::,Poco::"
----

Rename:

----
make -j8 CCACHE_PREFIX=rename-wrapper CCACHE_DISABLE=1 RENAME_ARGS="-csv=$HOME/rename.csv"
----

Generate compile_commands.json for clang-rename:

----
bear make -j8 CCACHE_DISABLE=1
----

`auto` killing:

----
make -j8 CCACHE_PREFIX=find-harmful-auto-wrapper CCACHE_DISABLE=1
----

== clang-tidy

Online:

----
run-clang-tidy 2>&1 |tee log.clang-tidy
grep error: log.clang-tidy |grep -v misc-non-private
----

Core:

----
~/git/vmexam/libreoffice/clang-tidy.py
----

== IWYU

Core:

----
bin/find-unneeded-includes $(cat .git/indented-files.cache .git/indented-files2.cache|grep cxx$)
bin/find-unneeded-includes sw/inc/*.hxx
bin/find-unneeded-includes writerfilter/inc/{dmapper,ooxml,rtftok}/*.hxx
----

Online:

----
~/git/include-what-you-use/iwyu_tool.py -p . test/UnitTiffLoad.cpp
----

// vim: ft=asciidoc
