#!/usr/bin/env python3
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

from xml.dom import minidom
import glob
import html.parser
import os
import re
import sys
import urllib.request
import xml.dom

def getAttrByName(attrs, name):
    for attrName, attrValue in attrs:
        if attrName == name:
            return attrValue

def getFeedUrl(url):
    class FeedUrlParser(html.parser.HTMLParser):
        def reset(self):
            html.parser.HTMLParser.reset(self)
            self.url = None

        def handle_starttag(self, tag, attrs):
            if self.url is None and tag == "link" and getAttrByName(attrs, "type") == "application/rss+xml":
                self.url = getAttrByName(attrs, "href")

    sock = urllib.request.urlopen(url)
    htmlPage = sock.read().decode('utf-8')
    sock.close()
    parser = FeedUrlParser()
    parser.feed(htmlPage)
    parser.close()
    return parser.url

def getUrlTo(fro, to, force=False):
    if os.path.exists(to):
        if force:
            os.remove(to)
        else:
            return

    print("Downloading: " + fro + " -> " + to)
    froSock = urllib.request.urlopen(fro)
    toSock = open(to + ".part", "wb")
    toSock.write(froSock.read())
    toSock.close()
    froSock.close()
    os.rename(to + ".part", to)

def parseFeed(feedUrl):
    rssPath = "rss.xml"
    getUrlTo(feedUrl, rssPath, force=True)
    return minidom.parse(rssPath)

def getBestVideo(contentNodes):
    maxQuality = 0
    for contentNode in contentNodes:
        quality = int(contentNode.attributes["width"].value) * int(contentNode.attributes["height"].value)
        if quality > maxQuality:
            maxQuality = quality
            maxNode = contentNode
    return maxNode.attributes["url"].value

def getItemUrl(itemNode):
    contentNodes = itemNode.getElementsByTagName("media:content")
    mediums = set(sorted([contentNode.attributes["medium"].value for contentNode in contentNodes]))
    if "video" in mediums:
        # Multiple content nodes, find the one that provides the best video quality.
        return getBestVideo(contentNodes)
    else:
        # Single content node, but points to a scaled down URL, need to tweak it to get the full one.
        url = contentNodes[0].attributes["url"].value
        return os.path.split(url)[0] + "/s0/"

def getItemPath(itemNode):
    for guidNode in itemNode.getElementsByTagName("guid"):
        guid = guidNode.firstChild.wholeText
    return os.path.join(objectsPath, re.sub(r".*(albumid.*)\?.*", r"\1", guid).replace('/', '-'))

def getItemExt(itemNode):
    title = itemNode.getElementsByTagName("media:title")[0].firstChild.wholeText
    return re.sub(r'.*\.', '', title).lower()

def main():
    url = sys.argv[1]
    albumPath = os.path.split(url)[1]
    if not os.path.exists(albumPath):
        os.mkdir(albumPath)
    os.chdir(albumPath)

    if not os.path.exists(objectsPath):
        os.mkdir(objectsPath)

    for item in glob.glob("item*"):
        os.remove(item)

    feedUrl = getFeedUrl(url)
    feed = parseFeed(feedUrl)
    counter = 1
    for rssNode in feed.getElementsByTagName("rss"):
        for counter, itemNode in enumerate(rssNode.getElementsByTagName("item")):
            itemUrl = getItemUrl(itemNode)
            itemPath = getItemPath(itemNode)
            getUrlTo(itemUrl, itemPath)
            itemExt = getItemExt(itemNode)
            os.link(itemPath, "item%04d.%s" % (counter + 1, itemExt))

# Globals
objectsPath = "objects"

if __name__ == "__main__":
    main()

# vim:set shiftwidth=4 softtabstop=4 expandtab:
