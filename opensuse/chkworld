#!/usr/bin/env python3

import csv
import os
import re
import sys

up2dates = {
    "lcov": "lynx -dump https://github.com/linux-test-project/lcov/releases|grep /lcov-.*tar.gz$ |sed -e 's|.*lcov-||;s|.tar.gz.*||;q' |sed 's/1.16/1.16+git.20220603.dfeb750/'",
    # just check that we're packaging the latest commit
    "gtimelog": "[ $(git ls-remote https://gitlab.collabora.com/collabora/gtimelog.git |grep master|cut -c 1-7) == 'ae1f65c' ] && echo 0.6.0",
}


def read_from_pipe(cmd):
    sock = os.popen(cmd)
    buf = sock.read()
    sock.close()
    return buf.strip()


def get_osc_version(project, pkg):
    read = False
    tries = 0
    line = ""
    while not read and tries < 3:
        try:
            tries += 1
            spec = read_from_pipe("osc cat %s %s %s.spec 2>/dev/null" % (project, pkg, pkg))
            line = [x for x in spec.split('\n') if x.startswith("Version")][0]
            read = True
        except IndexError:
            pass
    if not len(line):
        print("WARNING: empty output from 'osc cat home:%s %s %s.spec'" % (project, pkg, pkg))
    return re.sub('Version:\s+', '', line)


def list_outdated(project, packages):
    if not packages:
        packages = read_from_pipe("osc list %s" % project).split('\n')
    for i in packages:
        downstream = get_osc_version(project, i)
        if i not in up2dates:
            continue
        upstream = read_from_pipe(up2dates[i])
        if upstream != downstream or verbose:
            print("%s: %s != %s" % (i, downstream, upstream))


def list_failed(project, packages):
    sock = os.popen("osc pr -c %s" % project)

    reader = csv.reader(sock, delimiter=';')
    table = {}
    i = 0
    for row in reader:
        j = 0
        for cell in row:
            if i not in list(table.keys()):
                table[i] = {}
            table[i][j] = cell
            j += 1
        i += 1
    sock.close()

    for i in range(1, len(list(table.keys()))):
        for j in range(1, len(list(table[i].keys()))):
            if (not (table[i][j] in ("succeeded", "scheduled", "disabled", "blocked"))) or verbose:
                if (not packages) or table[i][0] in packages:
                    print("%s: %s on %s" % (table[i][0], table[i][j], table[0][j]))


def check_project(project, packages=None):
    list_outdated(project, packages)
    list_failed(project, packages)


verbose = "-v" in sys.argv
check_project("home:vmiklos")
check_project("devel:tools", ["lcov"])

# vim:set shiftwidth=4 softtabstop=4 expandtab:
