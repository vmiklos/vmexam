= Clang libtooling-based rename

== This tool vs clang-rename

This tool is similar to clang-rename, though there are a number of differences.

Pros:

- old name can be a simple qualified name, no need to manually specify a byte
  offset
- rename handles ctor initializer list, too
- comes with a wrapper to do fully automatic rewriting

Cons:

- handles only rename of class members so far
- only tested with clang-3.5.0

== Hello world

Example usage:

----
bin/rename -dump -old-name=C::nX -new-name=m_nX test.cxx --
----

If you get missing includes:

----
ln -s /usr/lib64
----

== Build system integration

LibreOffice integration example with csv handling, provided that:

- rename-wrapper is in your PATH
- rename.csv is something like in your HOME:

----
C::nX,m_nX
C::nY,m_nY
----

Then run:

----
make -sr -j8 COMPILER_EXTERNAL_TOOL=1 FORCE_COMPILE_ALL=1 CCACHE_PREFIX=rename-wrapper RENAME_ARGS="-csv=$HOME/rename.csv"
----

Once the rewriting is done, you can overwrite the original files with the .new ones with:

----
for i in $(find . -name "*.new"); do mv -f $i ${i%%.new}; done
----

== Generating the CSV input

For large classes, generating the CSV input may make sense if the rename logic
can be automated. E.g. making sure that all members have the `m_` prefix can
be done with this command:

----
bin/find-unprefixed-members -class-name=ns::C test.cxx --
----

Or the build system equivalent -- first touch one file that includes the class, then:

----
make -sr -j8 COMPILER_EXTERNAL_TOOL=1 CCACHE_PREFIX=find-unprefixed-members-wrapper RENAME_ARGS="-class-name=ClassName"
----

// vim: ft=asciidoc
