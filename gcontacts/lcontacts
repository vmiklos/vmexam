#!/usr/bin/env python3
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

import json
import os
import xml.etree.ElementTree as ElementTree


class LContacts(object):
    def __init__(self):
        configPath = os.path.expanduser("~/.gcontacts")
        # The JSON is expected to have the following keys:
        # - binddn: a Distinguished Name, e.g. uid=john,dc=example,dc=co,dc=hu
        # - ldapuri: refers to the LDAP server, e.g. ldaps://ldap.example.co.hu/
        # - searchbase: the starting point for the search, e.g. dc=example,dc=co,dc=hu
        # - password
        self.clientSecretsPath = os.path.join(configPath, "secrets-ldap.json")
        self.contactsXmlPath = os.path.join(configPath, "contacts-ldap.xml")

    def update(self):
        # Parse the credentials.
        with open(self.clientSecretsPath) as jsonSock:
            secrets = json.load(jsonSock)

        # Parse the input from LDAP.
        with os.popen("ldapsearch -D %s -H %s -b %s -x -w %s" % (secrets["binddn"], secrets["ldapuri"], secrets["searchbase"], secrets["password"])) as ldapSock:
            hasComment = False
            data = {}
            contacts = {}
            for line in ldapSock.readlines():
                line = line.strip()
                if line.startswith("#"):
                    hasComment = True
                elif not len(line):
                    if "displayName" in data.keys() and "mail" in data.keys():
                        contacts[data["displayName"]] = data["mail"]
                    hasComment = False
                    data = {}
                else:
                    tokens = line.split(': ')
                    if len(tokens) > 1:
                        data[tokens[0]] = tokens[1]

        # Now generate the output.
        feed = ElementTree.Element("feed")
        for k, v in contacts.items():
            entry = ElementTree.SubElement(feed, "entry")
            name = ElementTree.SubElement(entry, "name")
            ElementTree.SubElement(name, "fullName").text = k
            ElementTree.SubElement(entry, "email", address=v)
        tree = ElementTree.ElementTree(feed)
        tree.write(self.contactsXmlPath)


def main():
    contacts = LContacts()
    contacts.update()

if __name__ == "__main__":
    main()

# vim:set shiftwidth=4 softtabstop=4 expandtab:
