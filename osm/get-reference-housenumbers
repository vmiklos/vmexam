#!/usr/bin/env python3
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

import configparser
import hashlib
import html.parser
import io
import os
import sys
import urllib.error
import urllib.request


# Reads list of streets for an area from OSM.
def getStreets():
    ret = []

    sock = open("workdir/streets.csv")
    first = True
    for line in sock.readlines():
        if first:
            first = False
            continue

        tokens = line.strip().split('\t')
        if len(tokens) < 2:
            continue

        ret.append(tokens[1])

    sock.close()
    return sorted(set(ret))


# Returns URL of a street based on config.
def getStreetURL(street, prefix):
    return prefix + "/budapest%20xi.%20kerulet_" + simplify(street) + ".html"


# Returns SHA256 hash of an URL.
def getURLHash(url):
    return hashlib.sha256(url.encode('utf-8')).hexdigest()


# Handles normalization of a street name.
def simplify(s):
    s = s.replace('Á', 'A').replace('á', 'a')
    s = s.replace('É', 'E').replace('é', 'e')
    s = s.replace('Í', 'I').replace('í', 'i')
    s = s.replace('Ó', 'O').replace('ó', 'o')
    s = s.replace('Ö', 'O').replace('ö', 'o')
    s = s.replace('Ő', 'O').replace('ő', 'o')
    s = s.replace('Ú', 'U').replace('ú', 'u')
    s = s.replace('Ü', 'U').replace('ü', 'u')
    s = s.replace('Ű', 'U').replace('ű', 'u')
    s = s.replace(' ', '_').lower()
    return s


# Extracts a list of house numbers from a HTML page.
class HTMLHouseNumberParser(html.parser.HTMLParser):
    def __init__(self):
        html.parser.HTMLParser.__init__(self)
        self.inCell = False
        self.inLink = False
        self.housenumbers = []

    def handle_starttag(self, tag, attrs):
        if tag == "td":
            self.inCell = True
        elif tag == "a":
            self.inLink = True

    def handle_endtag(self, tag):
        if tag == "td":
            self.inCell = False
        elif tag == "a":
            self.inLink = False

    def handle_data(self, data):
        if (not self.inCell) or self.inLink:
            return

        houseNumber = data.strip()
        if not len(houseNumber):
            return

        self.housenumbers.append(simplify(houseNumber))


# Gets known house numbers for a single street
def getReferenceHouseNumbers(street, prefix):
    url = getStreetURL(street, prefix)
    urlHash = getURLHash(url)

    if not os.path.exists("workdir/cache"):
        os.makedirs("workdir/cache")

    cachePath = "workdir/cache/" + urlHash
    if not os.path.exists(cachePath):
        # Not in cache, download.
        sys.stderr.write("downloading '" + url + "'...")
        try:
            urlSock = urllib.request.urlopen(url)
            sys.stderr.write(" done.\n")
        except urllib.error.HTTPError:
            urlSock = io.StringIO("")
            sys.stderr.write(" not found.\n")
        cacheSock = open(cachePath, "w")
        buf = urlSock.read()
        if type(buf) == bytes:
            buf = buf.decode('utf-8')
        cacheSock.write(buf)
        cacheSock.close()
        urlSock.close()
    sock = open(cachePath)
    buf = sock.read()

    parser = HTMLHouseNumberParser()
    if len(buf):
        parser.feed(buf)
    return parser.housenumbers


# Gets known house numbers (not their coordinates) from a reference site, based
# on street names from OSM.
def main():
    # Sample config:
    # [get-reference-housenumbers]
    # prefix = ...
    config = configparser.ConfigParser()
    rc = os.path.join(os.environ['HOME'], '.get-reference-housenumbersrc')
    config.read(rc)
    prefix = config.get('get-reference-housenumbers', 'prefix').strip()
    streets = getStreets()

    lst = []
    for street in streets:
        lst += getReferenceHouseNumbers(street, prefix)

    lst = sorted(set(lst))
    sock = open("workdir/street-housenumbers-reference.lst", "w")
    for l in lst:
        sock.write(l + "\n")
    sock.close()

if __name__ == "__main__":
    main()

# vim:set shiftwidth=4 softtabstop=4 expandtab:
