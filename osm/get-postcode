#!/usr/bin/env python3
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

# Usage: ./get-postcode 'Brassó út' '121'
# Returns a single number, which is the postcode.

import re
import sys


def getPostcode(street, house, streetLines, hint=None):
    houseNum = int(house)

    fallback = None
    for i in streetLines:
        if street != "%s %s" % (i[1].strip(), i[2].strip()):
            continue

        if hint:
            # TODO generalize this.
            if hint.startswith("11") and i[5].strip() != "XI.":
                continue

        num1 = int(i[3])
        num2 = int(i[4])
        if num1 == 0:
            return i[0]
        elif num1 > 0:
            if num2 > 0:
                # Within range, for the relevant side.
                if num2 >= houseNum and houseNum >= num1 and num1 % 2 == houseNum % 2:
                    return i[0]
            elif num2 == 0:
                if houseNum >= num1:
                    return i[0]
        elif num1 == -1:
            if houseNum % 2 == 1:
                return i[0]
        elif num1 == -2:
            if houseNum % 2 == 0:
                return i[0]
        elif num1 == -3:
            fallback = i[0]

    return fallback

def readReferencePostCodes():
    sock = open("workdir/postcodes.csv")
    first = True
    streetLines = []
    for line in sock.readlines():
        if first:
            first = False
            continue
        cols = line.strip().split("\t")
        if len(cols) < 3:
            continue
        streetLines.append(cols)
    return streetLines

def checkPostcodes(referencePostCodes):
    sock = open("workdir/street-housenumbers.csv")
    first = True
    streetLines = []
    for line in sock.readlines():
        if first:
            first = False
            continue
        cols = line.strip().split("\t")
        if not len(cols[2]):
            # No house number
            continue
        house = cols[2]
        if not re.match("^[0-9]+$", house):
            # TODO Maybe try to map these to ints in the future?
            continue
        # OSM data
        actual = cols[3]
        # Reference data
        expected = getPostcode(cols[1], house, referencePostCodes, hint=actual)
        if actual != expected:
            print("%s %s: actual on OSM is '%s', expected '%s'" % (cols[1], house, actual, expected))

if __name__ == "__main__":
    referencePostCodes = readReferencePostCodes()
    if len(sys.argv) == 3:
        print(getPostcode(sys.argv[1], sys.argv[2], referencePostCodes))
    else:
        # Check for mismatches
        checkPostcodes(referencePostCodes)

# vim:set shiftwidth=4 softtabstop=4 expandtab:
