#!/usr/bin/env python

import csv, os, re, sys

up2dates = {
		"cpm": "lynx -dump http://sourceforge.net/api/file/index/project-id/62803/mtime/desc/limit/20/rss | egrep '/cpm-.*.tar.gz' | sed -e 's|.*cpm-||;s|.tar.gz.*||' | sort | tac | head -n 1",
		"lcov": "lynx -dump http://ltp.sourceforge.net/coverage/lcov.php|grep lcov-.*tar.gz$ |sed -e 's|.*lcov-||;s|.tar.gz.*||;q'",
		"foo2zjs": "lynx -dump http://foo2zjs.rkkda.com/Changelog|head -n 1|cut -d ' ' -f 1|sed y/-/_/",
		# just check that we're packaging the latest commit from the stable branch
		"gtimelog": "[ $(git ls-remote git://git.collabora.co.uk/git/gtimelog.git|grep '/0\\.2' |cut -c 1-7) == 'f2be28e' ] && echo 0.2.3",
		}

def read_from_pipe(cmd):
	sock = os.popen(cmd)
	buf = sock.read()
	sock.close()
	return buf.strip()

def get_osc_version(project, pkg):
	read = False
	tries = 0
	line = ""
	while not read and tries < 3:
		try:
			tries += 1
			spec = read_from_pipe("osc cat %s %s %s.spec 2>/dev/null" % (project, pkg, pkg))
			line = filter(lambda x: x.startswith("Version"), spec.split('\n'))[0]
			read = True
		except IndexError:
			pass
	if not len(line):
		print "WARNING: empty output from 'osc cat home:%s %s %s.spec'" % (project, pkg, pkg)
	return re.sub('Version:\s+', '', line)

def list_outdated(project, packages):
	if not packages:
		packages = read_from_pipe("osc list %s" % project).split('\n')
	for i in packages:
		downstream = get_osc_version(project, i)
		upstream = read_from_pipe(up2dates[i])
		if upstream != downstream or verbose:
			print "%s: %s != %s" % (i, downstream, upstream)

def list_failed(project, packages):
	sock = os.popen("osc pr -c %s" % project)

	reader = csv.reader(sock, delimiter=';')
	table = {}
	i = 0
	for row in reader:
		j = 0
		for cell in row:
			if not i in table.keys():
				table[i] = {}
			table[i][j] = cell
			j += 1
		i += 1
	sock.close()

	for i in range(1, len(table.keys())):
		for j in range(1, len(table[i].keys())):
			if table[i][j] != "succeeded" or verbose:
				if (not packages) or table[i][0] in packages:
					print "%s: %s on %s" % (table[i][0], table[i][j], table[0][j])

def check_project(project, packages = None):
	list_outdated(project, packages)
	list_failed(project, packages)

verbose = "-v" in sys.argv
check_project("home:vmiklos")
check_project("devel:tools", ["lcov"])
