{
  "name": "node-calendar",
  "description": "A fairly straightforward port of the Python calendar package with extensions where appropriate.",
  "url": "https://github.com/ArminTamzarian/node-calendar",
  "keywords": [
    "calendar",
    "python",
    "year",
    "month",
    "day",
    "locale",
    "isleap",
    "leapdays",
    "monthrange",
    "setlocale",
    "noconflict",
    "timegm",
    "weekday",
    "getfirstweekday",
    "setfirstweekday",
    "iterweekdays",
    "itermonthdates",
    "itermonthdays",
    "itermonthdays2",
    "monthdatescalendar",
    "monthdayscalendar",
    "monthdays2calendar",
    "yeardatescalendar",
    "yeardayscalendar",
    "yeardays2calendar"
  ],
  "author": {
    "name": "Armin Tamzarian",
    "email": "tamzarian1989@gmail.com"
  },
  "scripts": {
    "test": "mocha -R spec test/test-*.js"
  },
  "lib": ".",
  "main": "./node-calendar.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/ArminTamzarian/node-calendar"
  },
  "version": "0.1.4",
  "license": "MIT",
  "devDependencies": {
    "mocha": "1.13.0",
    "cldr": ">=1.0.2"
  },
  "readme": "# node-calendar\n\nA fairly straightforward port of the Python [calendar](http://docs.python.org/3/library/calendar.html?highlight=calendar) package with extensions where appropriate.\n\nThis module allows you to output calendars like the Unix cal program, and provides additional useful functions related to the calendar. By default, these calendars have Monday as the first day of the week, and Sunday as the last (the European convention). Use setfirstweekday() to set the first day of the week to Sunday (6) or to any other weekday. Parameters that specify dates are given as integers.\n\n[![Build Status](https://travis-ci.org/ArminTamzarian/node-calendar.png?branch=master)](https://travis-ci.org/ArminTamzarian/node-calendar)\n\n## Getting Started\n\nInstall it in your browser:\n\n```html\n<script src=\"node-calendar.js\"></script>\n```\n\nOr in node.js:\n\n```\nnpm install node-calendar\n```\n\n```javascript\nvar calendar = require('node-calendar');\n```\n\nThen construct a new Calendar object and go to town...\n\n```javascript\nvar cal = new calendar.Calendar(calendar.SUNDAY);\nvar yearCalendar = cal.yeardayscalendar(2004);\n```\n\n## Additional Notes\n\n### Locale\n\nProperly implementing locale data via Node or Javascript is a very difficult task due to the fact there there is currently no standard implementation of locale information across Javascript interpreters. As a result node-calendar does not ship with locale functionality available through the browser implementation outside of the default `en_US` locale.\n\nTo enable extended locale functionality node-calendar utilizes the optional [cldr](https://github.com/papandreou/node-cldr) module. If node-calendar locates the [cldr](https://github.com/papandreou/node-cldr) module within the either the project-local or node-global module directories you can set your locale via the `calendar.setlocale()` method which will in turn populate the `calendar.month_name`, `calendar.month_abbr`, `calendar.day_name`, `calendar.day_abbr` properties. Note that this functionality is optional and without including this package the default `en_US` locale and its associated data will still be available.\n\nTo enable extended locale functionality add the following to the `dependencies` section of your project's `package.json` file:\n\n```javascript\n\"cldr\" : \">=1.0.2\"\n```\n\n### Epoch\n\nAlthough not explicitly stated all functions are compatible with dates and times ocurring after the [Unix epoch](http://en.wikipedia.org/wiki/Unix_time) (00:00:00 UTC, Thursday, 1 January 1970). Due to certain interpretations of [section 15.9](http://es5.github.io/#x15.9) of the official EMCAScript specification by disparate developers of Javascript interpreters date and time functionality before the Unix epoch is indeterminate at best.\n\nFor the time being all testing for node-calendar delegates to the data returned by that of the Python class resulting in full compliance for both [NodeJS](http://nodejs.org/) and related [V8](https://code.google.com/p/v8/) browser interpreters. However, note that although all tested browsers appear to be fully unit test compliant for dates after the Unix epoch proper functionality before this date can not be guaranteed. To verify functionality in your browser of choice see [Testing](#testing) to execute the node-calendar unit tests.\n\n## API\n\n### calendar.isleap(`year`)\n\nReturn true for leap years, false for non-leap years.\n\n* `year` - (Number) Year to test.\n\nExample:\n```javascript\ncalendar.isleap(2001); // -> false\ncalendar.isleap(2000); // -> true\n```\n\n### calendar.leapdays(`y1`, `y2`)\n\nReturn number of leap years in range [y1, y2). Assumes y1 <= y2.\n\n* `y1` - (Number) Beginning year in the range to test.\n* `y2` - (Number) Ending year in the range to test.\n\nExample:\n```javascript\ncalendar.leapdays(1990, 2050); // -> 15\ncalendar.leapdays(2000, 2005); // -> 2\n```\n\n### calendar.monthrange(`year`, `month`)\n\nReturn starting weekday (0-6 ~ Mon-Sun) and number of days (28-31) for year, month.\n\n* `year` - (Number) Year for which the range should be calculated.\n* `month` - (Number) Month for which the range should be calculated.\n - Throws `IllegalMonthError` if the provided month is invalid.\n\nExample:\n```javascript\ncalendar.monthrange(1980, 9);  // -> [ 0, 30 ]\ncalendar.monthrange(2004, 2);  // -> [ 6, 29 ]\ncalendar.monthrange(2038, 12); // -> [ 2, 31 ]\ncalendar.monthrange(2013, 13); // -> Throws IllegalMonthError\n```\n\n### calendar.noconflict()\n\n(Browsers only) Set `calendar` property back to its previous value.\n\nReturns the node-calendar object.\n\n### calendar.setlocale(`[locale]`)\n\nSets the locale for use in extracting month and weekday names.\n\n* `locale` - (String) Locale to set on the calendar object. `Default: en_US`\n - Throws `IllegalLocaleError` if the provided locale is invalid.\n\nExample:\n```javascript\ncalendar.setlocale();\ncalendar.day_name; // -> [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ]\n\ncalendar.setlocale('fr_FR');\ncalendar.day_name; // -> [ 'dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi' ]\n\ncalendar.setlocale('xx_XX'); // -> Throws IllegalLocaleError\n```\n\n### calendar.timegm(`timegmt`)\n\nUnrelated but handy function to calculate Unix timestamp from GMT.\n\n* `timegmt` - (Array) An array containing the elements from a [time structure](http://docs.python.org/3/library/time.html#time.struct_time) dataset. `Format: [tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_sec]`\n - Throws `IllegalMonthError` if the provided month element is invalid.\n - Throws `IllegalDayError` if the provided day element is invalid.\n - Throws `IllegalTimeError` if any of the the provided time elements are invalid.\n\nExample:\n```javascript\ncalendar.timegm([1970, 1, 1, 0, 0, 0]); // -> 0\ncalendar.timegm([2001, 1, 2, 3, 4, 5]); // -> 978404645\n\ncalendar.timegm([2001, 13, 1, 0, 0, 0]); // Throws IllegalMonthError\ncalendar.timegm([2001, 2, 29, 0, 0, 0]); // Throws IllegalDayError\ncalendar.timegm([2001, 1, 1, 24, 0, 0]); // Throws IllegalTimeError\n```\n\n### calendar.weekday(`year`, `month`, `day`)\n\nReturn weekday (0-6 ~ Mon-Sun) for year (1970-...), month (1-12), day (1-31).\n\n* `year` - (Number) Year for which the weekday should be calculated.\n* `month` - (Number) Month for which the weekday should be calculated.\n* `day` - (Number) Day for which the weekday should be calculated.\n - Throws `IllegalMonthError` if the provided month element is invalid.\n - Throws `IllegalDayError` if the provided day element is invalid.\n\nExample:\n```javascript\ncalendar.weekday(1970, 1, 1);  // -> 3\ncalendar.weekday(2004, 2, 29), // -> 6\n\ncalendar.weekday(2001, 0, 1);  // -> Throws IllegalMonthError\ncalendar.weekday(2001, 2, 29); // -> Throws IllegalDayError\n```\n\n### calendar.Calendar([`firstweekday`])\n\nBase calendar class. This class doesn't do any formatting. It simply provides data to subclasses.\n\n* `firstweekday` - (Number) Numerical day of the week the calendar weeks should start. (0=MON, 1=TUE, ...) `Default: 0`\n - Throws `IllegalWeekdayError` if the provided weekday is invalid.\n\nExample:\n```javascript\nvar cal = calendar.Calendar();\ncal.getfirstweekday(); // -> 0\n\nvar cal = calendar.Calendar(-1); // -> Throws IllegalWeekdayError\n```\n\n### calendar.Calendar.getfirstweekday()\n\nGetter for firstweekday.\n\nExample:\n```javascript\nvar cal = calendar.Calendar(6);\ncal.getfirstweekday(); // -> 6\n```\n\n### calendar.Calendar.setfirstweekday(`firstweekday`)\n\nSetter for firstweekday.\n\n* `firstweekday` - (Number) Numerical day of the week the calendar weeks should start. (0=MON, 1=TUE, ...)\n - Throws `IllegalWeekdayError` if the provided weekday is invalid.\n\nExample:\n```javascript\nvar cal = calendar.Calendar(6);\ncal.getfirstweekday();  // -> 6\n\ncal.setfirstweekday(3);\ncal.getfirstweekday();  // -> 3\n\ncal.setfirstweekday(7); // -> Throws IllegalWeekdayError\n```\n\n### calendar.Calendar.iterweekdays()\n\nReturn an array for one week of weekday numbers starting with the configured first one.\n\nExample:\n```javascript\nnew calendar.Calendar(3).iterweekdays();\n// -> [ 3, 4, 5, 6, 0, 1, 2 ]\n```\n\n### calendar.Calendar.itermonthdates(`year`, `month`)\n\nReturn an array for one month. The array will contain Date values and will always iterate through complete weeks, so it will yield dates outside the specified month.\n\n* `year` - (Number) Year for which the calendar should be generated.\n* `month` - (Number) Month for which the calendar should be generated.\n - Throws `IllegalMonthError` if the provided month is invalid.\n\nExample:\n```javascript\nnew calendar.Calendar(3).itermonthdates(2004, 2);\n// -> [ Thu Jan 29 2004 00:00:00 GMT-0600 (CST),\n//      Fri Jan 30 2004 00:00:00 GMT-0600 (CST),\n//      Sat Jan 31 2004 00:00:00 GMT-0600 (CST),\n//      Sun Feb 01 2004 00:00:00 GMT-0600 (CST),\n//      Mon Feb 02 2004 00:00:00 GMT-0600 (CST),\n//      ...\n//      Sun Feb 29 2004 00:00:00 GMT-0600 (CST),\n//      Mon Mar 01 2004 00:00:00 GMT-0600 (CST),\n//      Tue Mar 02 2004 00:00:00 GMT-0600 (CST),\n//      Wed Mar 03 2004 00:00:00 GMT-0600 (CST) ]\n\nnew calendar.Calendar(3).itermonthdates(2004, 13);\n// -> Throws IllegalMonthError\n```\n\n### calendar.Calendar.itermonthdays(`year`, `month`)\n\nLike itermonthdates(), but will yield day numbers. For days outside the specified month the day number is 0.\n\n* `year` - (Number) Year for which the calendar should be generated.\n* `month` - (Number) Month for which the calendar should be generated.\n - Throws `IllegalMonthError` if the provided month is invalid.\n\nExample:\n```javascript\nnew calendar.Calendar(3).itermonthdays(2004, 2);\n// -> [ 0, 0, 0, 1, 2, 3, 4, 5, 6, ... 27, 28, 29, 0, 0, 0 ]\n\nnew calendar.Calendar(3).itermonthdays(2004, 13);\n// -> Throws IllegalMonthError\n```\n\n### calendar.Calendar.itermonthdays2(`year`, `month`)\n\nLike itermonthdates(), but will yield [day number, weekday number] arrays. For days outside the specified month the day number is 0.\n\n* `year` - (Number) Year for which the calendar should be generated.\n* `month` - (Number) Month for which the calendar should be generated.\n - Throws `IllegalMonthError` if the provided month is invalid.\n\nExample:\n```javascript\nnew calendar.Calendar(1).itermonthdays2(2012, 5);\n// -> [ [ 1,  1 ],\n//      [ 2,  2 ],\n//      [ 3,  3 ],\n//      ...\n//      [ 31, 3 ],\n//      [ 0,  4 ],\n//      [ 0,  5 ],\n//      [ 0,  6 ],\n//      [ 0,  0 ] ]\n\nnew calendar.Calendar(1).itermonthdays2(2012, 13);\n// -> Throws IllegalMonthError\n```\n\n### calendar.Calendar.monthdatescalendar(`year`, `month`)\n\nReturn a matrix (array of array) representing a month's calendar. Each row represents a week; week entries are Date values.\n\n* `year` - (Number) Year for which the calendar should be generated.\n* `month` - (Number) Month for which the calendar should be generated.\n - Throws `IllegalMonthError` if the provided month is invalid.\n\nExample:\n```javascript\nnew calendar.Calendar(1).monthdatescalendar(2013, 5);\n// -> [ [ Tue Apr 30 2013 00:00:00 GMT-0500 (CDT),\n//        Wed May 01 2013 00:00:00 GMT-0500 (CDT),\n//        Thu May 02 2013 00:00:00 GMT-0500 (CDT),\n//        Fri May 03 2013 00:00:00 GMT-0500 (CDT),\n//        Sat May 04 2013 00:00:00 GMT-0500 (CDT),\n//        Sun May 05 2013 00:00:00 GMT-0500 (CDT),\n//        Mon May 06 2013 00:00:00 GMT-0500 (CDT) ],\n//      [ Tue May 07 2013 00:00:00 GMT-0500 (CDT),\n//        Wed May 08 2013 00:00:00 GMT-0500 (CDT),\n//        ...\n//        Fri May 31 2013 00:00:00 GMT-0500 (CDT),\n//        Sat Jun 01 2013 00:00:00 GMT-0500 (CDT),\n//        Sun Jun 02 2013 00:00:00 GMT-0500 (CDT),\n//        Mon Jun 03 2013 00:00:00 GMT-0500 (CDT) ] ]\n\nnew calendar.Calendar(1).monthdatescalendar(2013, 0);\n// -> Throws IllegalMonthError\n```\n\n### calendar.Calendar.monthdayscalendar(`year`, `month`)\n\nReturn a matrix representing a month's calendar. Each row represents a week; days outside this month are zero.\n\n* `year` - (Number) Year for which the calendar should be generated.\n* `month` - (Number) Month for which the calendar should be generated.\n - Throws `IllegalMonthError` if the provided month is invalid.\n\nExample:\n```javascript\nnew calendar.Calendar(1).monthdayscalendar(2013, 5);\n// -> [ [  0,  1,  2,  3,  4,  5,  6 ],\n//      [  7,  8,  9, 10, 11, 12, 13 ],\n//      [ 14, 15, 16, 17, 18, 19, 20 ],\n//      [ 21, 22, 23, 24, 25, 26, 27 ],\n//      [ 28, 29, 30, 31,  0,  0,  0 ] ]\n\nnew calendar.Calendar(1).monthdayscalendar(2013, 13);\n// -> Throws IllegalMonthError\n```\n\n### calendar.Calendar.monthdays2calendar(`year`, `month`)\n\nReturn a matrix representing a month's calendar. Each row represents a week; week entries are [day number, weekday number] arrays. Day numbers outside this month are zero.\n\n* `year` - (Number) Year for which the calendar should be generated.\n* `month` - (Number) Month for which the calendar should be generated.\n - Throws `IllegalMonthError` if the provided month is invalid.\n\nExample:\n```javascript\nnew calendar.Calendar(1).monthdays2calendar(2013, 5);\n// -> [ [ [  0, 1 ], [  1, 2 ], [  2, 3 ], [  3, 4 ], [  4, 5 ], [  5, 6 ], [  6, 0 ] ],\n//      [ [  7, 1 ], [  8, 2 ], [  9, 3 ], [ 10, 4 ], [ 11, 5 ], [ 12, 6 ], [ 13, 0 ] ],\n//      [ [ 14, 1 ], [ 15, 2 ], [ 16, 3 ], [ 17, 4 ], [ 18, 5 ], [ 19, 6 ], [ 20, 0 ] ],\n//      [ [ 21, 1 ], [ 22, 2 ], [ 23, 3 ], [ 24, 4 ], [ 25, 5 ], [ 26, 6 ], [ 27, 0 ] ],\n//      [ [ 28, 1 ], [ 29, 2 ], [ 30, 3 ], [ 31, 4 ], [  0, 5 ], [  0, 6 ], [  0, 0 ] ] ]\n\nnew calendar.Calendar(1).monthdays2calendar(2013, 13);\n// -> Throws IllegalMonthError\n```\n\n### calendar.Calendar.yeardatescalendar(`year`, [`width`])\n\nReturn the data for the specified year ready for formatting. The return value is an array of month rows. Each month row contains up to width months. Each month contains between 4 and 6 weeks and each week contains 1-7 days. Days are Date objects.\n\n* `year` - (Number) Year for which the calendar should be generated.\n* `width` - (Number) The number of months to include in each row. Default: 3\n\nExample:\n```javascript\nnew calendar.Calendar(1).yeardatescalendar(2018, 6);\n// -> [ [ [ [Object], [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ] ],\n//      [ [ [Object], [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ] ] ]\n```\n\n### calendar.Calendar.yeardayscalendar(`year`, [`width`])\n\nReturn the data for the specified year ready for formatting (similar to yeardatescalendar()). Entries in the week arrays are day numbers. Day numbers outside this month are zero.\n\n* `year` - (Number) Year for which the calendar should be generated.\n* `width` - (Number) The number of months to include in each row. Default: 3\n\nExample:\n```javascript\nnew calendar.Calendar(1).yeardayscalendar(2018, 6);\n// -> [ [ [ [Object], [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ] ],\n//      [ [ [Object], [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ] ] ]\n```\n\n### calendar.Calendar.yeardays2calendar(`year`, [`width`])\n\nReturn the data for the specified year ready for formatting (similar to yeardatescalendar()). Entries in the week arrays are [day number, weekday number] arrays. Day numbers outside this month are zero.\n\n* `year` - (Number) Year for which the calendar should be generated.\n* `width` - (Number) The number of months to include in each row. Default: 3\n\nExample:\n```javascript\nnew calendar.Calendar(1).yeardays2calendar(2018, 6);\n// -> [ [ [ [Object], [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ] ],\n//      [ [ [Object], [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ],\n//        [ [Object], [Object], [Object], [Object], [Object] ] ] ]\n```\n\n## Exceptions\n\n### calendar.IllegalLocaleError([`message`])\n\nError indicating a nonexistent or unsupported locale specified.\n\n* `message` - (String) Optional custom error message.\n\n### calendar.IllegalDayError([`message`])\n\nError indicating a day index specified outside of the valid range.\n\n* `message` - (String) Optional custom error message.\n\n### calendar.IllegalMonthError([`message`])\n\nError indicating a month index specified outside of the expected range (1-12 ~ Jan-Dec).\n\n* `message` - (String) Optional custom error message.\n\n### calendar.IllegalTimeError([`message`])\n\nError indicating a time element is outside of the valid range.\n\n* `message` - (String) Optional custom error message.\n\n### calendar.IllegalWeekdayError([`message`])\n\nError indicating a weekday index specified outside of the expected range (0-6 ~ Mon-Sun).\n\n* `message` - (String) Optional custom error message.\n\n## Properties\n\n### calendar.day_name\n\nAn array that represents the days of the week in the current locale.\n\n### calendar.day_abbr\n\nAn array that represents the abbreviated days of the week in the current locale.\n\n### calendar.month_name\n\nAn array that represents the months of the year in the current locale. This follows normal convention of January being month number 1, so it has a length of 13 and `month_name[0]` is the empty string.\n\n### calendar.month_abbr\n\nAn array that represents the abbreviated months of the year in the current locale. This follows normal convention of January being month number 1, so it has a length of 13 and `month_abbr[0]` is the empty string.\n\n## Constants\n\n### Weekdays\n\n```\ncalendar.MONDAY     = 0\ncalendar.TUESDAY    = 1\ncalendar.WEDNESDAY  = 2\ncalendar.THURSDAY   = 3\ncalendar.FRIDAY     = 4\ncalendar.SATURDAY   = 5\ncalendar.SUNDAY     = 6\n```\n\n### Months\n\n```\ncalendar.JANUARY    =  1\ncalendar.FEBRUARY   =  2\ncalendar.MARCH      =  3\ncalendar.APRIL      =  4\ncalendar.MAY        =  5\ncalendar.JUNE       =  6\ncalendar.JULY       =  7\ncalendar.AUGUST     =  8\ncalendar.SEPTEMBER  =  9\ncalendar.OCTOBER    = 10\ncalendar.NOVEMBER   = 11\ncalendar.DECEMBER   = 12\n```\n\n## Testing\n\nIn your browser:\n\n```\nopen test/test.html\n```\n\nOr in node.js:\n\n```\nnpm test\n```\n\n## Release notes\n\n### 0.1.4\n\n* Extended error checking.\n* Massively updated unit testing.\n* Updated API documentation to include examples.\n* Noted inherent errors for some Javascript interpreters for dates before the Unix epoch.\n\n### 0.1.3\n\n* Implementation of `calendar.gmtime`\n* Addition of `calendar.IllegalDayError` and `calendar.IllegalTimeError` exceptions.\n\n### 0.1.2\n\n* Integration with [cldr](https://github.com/papandreou/node-cldr) to enable locale-specific month and day names.\n* Impletation of `calendar.month_name`, `calendar.month_abbr`, `calendar.day_name`, `calendar.day_abbr` properties.\n* Addition of `calendar.setlocale` and associated `IllegalWeekdayError`.\n* Reimplemented browser-based testing framework utilizing included [Mocha](http://visionmedia.github.io/mocha/) framework.\n* Fixed error in name property for `calendar.IllegalWeekdayError`.\n\n### 0.1.1\n\n* Implementation of `calendar.isleap`, `calendar.leapdays`, `calendar.monthrange`, and `calendar.weekday` utility functions.\n* Addition of `calendar.IllegalMonthError` and `calendar.IllegalWeekdayError` exceptions.\n* Moved `Calendar` to `calendar.Calendar` to more closely match Python package scheme.\n* Refactored testing to [Mocha](http://visionmedia.github.io/mocha/) and removed browser-based testing framework.\n* Numerous unit tests added.\n\n### 0.1.0\n\n* Initial Release\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Armin Tamzarian\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ArminTamzarian/node-calendar/issues"
  },
  "_id": "node-calendar@0.1.4",
  "dist": {
    "shasum": "35eba5b115ed13252fb2223585d0f3beb5f92216",
    "tarball": "https://registry.npmjs.org/node-calendar/-/node-calendar-0.1.4.tgz"
  },
  "_from": "node-calendar@latest",
  "_npmVersion": "1.2.32",
  "_npmUser": {
    "name": "armintamzarian",
    "email": "tamzarian1989@gmail.com"
  },
  "maintainers": [
    {
      "name": "armintamzarian",
      "email": "tamzarian1989@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "35eba5b115ed13252fb2223585d0f3beb5f92216",
  "_resolved": "https://registry.npmjs.org/node-calendar/-/node-calendar-0.1.4.tgz"
}
