#!/usr/bin/env python
# 
#   gammu2gcontacts - converts gammu backup to google contacts csv (so you can import it)
#  
#   Copyright (c) 2011 by Miklos Vajna <vmiklos@frugalware.org>
#  
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
# 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
#   USA.
#

import ConfigParser, codecs

class Contact:
	def __init__(self):
		Contact.props = ["Name", "Given Name", "Additional Name", "Family Name", "Yomi Name", "Given Name Yomi", "Additional Name Yomi", "Family Name Yomi", "Name Prefix", "Name Suffix", "Initials", "Nickname", "Short Name", "Maiden Name", "Birthday", "Gender", "Location", "Billing Information", "Directory Server", "Mileage", "Occupation", "Hobby", "Sensitivity", "Priority", "Subject", "Notes", "Group Membership", "E-mail 1 - Type", "E-mail 1 - Value", "Phone 1 - Type", "Phone 1 - Value", "Phone 2 - Type", "Phone 2 - Value", "Phone 3 - Type", "Phone 3 - Value", "Phone 4 - Type", "Phone 4 - Value", "Phone 5 - Type", "Phone 5 - Value", "Address 1 - Type", "Address 1 - Formatted", "Address 1 - Street", "Address 1 - City", "Address 1 - PO Box", "Address 1 - Region", "Address 1 - Postal Code", "Address 1 - Country", "Address 1 - Extended Address", "Organization 1 - Type", "Organization 1 - Name", "Organization 1 - Yomi Name", "Organization 1 - Title", "Organization 1 - Department", "Organization 1 - Symbol", "Organization 1 - Location", "Organization 1 - Job Description", "Website 1 - Type", "Website 1 - Value"]
		self.attrs = {'Group Membership':'My Contacts'}

	def __str__(self):
		ret = []
		for i in Contact.props:
			ret.append(self.attrs.get(i, ''))
		return '"'+'","'.join(ret)+'"'

	def __setitem__(self, k, v):
		if hasattr(self.attrs, k):
			print "warning, attribute '%s' is already set!" % k
		self.attrs[k] = v

	@staticmethod
	def header():
		return '"'+'","'.join(Contact.props)+'"'

def fromutf16(s):
	length = len(s) / 4
	pos = 0
	ret = []
	for i in range(length):
		part = s[pos*4:pos*4+4]
		ret.append(eval("'\\x%s\\x%s'.decode('utf-16')" % (part[2:], part[:2])))
		pos += 1
	return "".join(ret)

config = ConfigParser.ConfigParser()
config.read("backup.gammu")

contacts = []
for i in config.sections():
	if i == "Backup":
		pass
	elif i.startswith("PhonePBK") or i.startswith("SIMPBK"):
		c = Contact()
		t = None
		phonecounter = 0
		for j in config.options(i):
			if j == "location":
				pass
			elif j.startswith("entry") and j.endswith("type"):
				t = config.get(i, j)
			elif j.startswith("entry") and j.endswith("text"):
				pass
			elif j.startswith("entry") and j.endswith("textunicode"):
				if not t:
					print "warning, text without type!"
				v = fromutf16(config.get(i, j))
				if t == "LastName":
					c["Family Name"] = v
				elif t == "Name" or t == "FirstName":
					c["Name"] = v
				elif t == "Note":
					c["Notes"] = v
				elif t == "NumberGeneral":
					phonecounter += 1
					c["Phone %d - Type" % phonecounter] = "Other"
					c["Phone %d - Value" % phonecounter] = v
				elif t == "NumberHome":
					phonecounter += 1
					c["Phone %d - Type" % phonecounter] = "Home"
					c["Phone %d - Value" % phonecounter] = v
				elif t == "NumberMobile":
					phonecounter += 1
					c["Phone %d - Type" % phonecounter] = "Mobile"
					c["Phone %d - Value" % phonecounter] = v
				elif t == "NumberWork":
					phonecounter += 1
					c["Phone %d - Type" % phonecounter] = "Work"
					c["Phone %d - Value" % phonecounter] = v
				elif t == "Email":
					c["E-mail 1 - Type"] = "Other"
					c["E-mail 1 - Value"] = v
				elif t == "Custom1":
					c["Address 1 - Type"] = "Home"
					c["Address 1 - Extended Address"] = v
				else:
					print "warning, unknown entry type '%s'" % t
				t = None
			elif j.startswith("entry") and j.endswith("number"):
				pass
			else:
				print "warning, unknown option type '%s'" % j
		contacts.append(c)
	elif i.startswith("Calendar"):
		pass
	elif i.startswith("Note"):
		pass
	elif i.startswith("Caller"):
		pass
	elif i.startswith("SMSC"):
		pass
	elif i.startswith("TODO"):
		pass
	elif i.startswith("GPRSPoint"):
		pass
	elif i == "Startup":
		pass
	elif i == "Checksum":
		pass
	else:
		print "warning, unknown section type '%s'" % i

sock = codecs.open("google.csv", mode="w", encoding='utf-16')
print >>sock, Contact.header()
for i in contacts:
	print >>sock, i.__str__()
sock.close()
