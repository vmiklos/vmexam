#!/usr/bin/env python
#
# gammu2gcontacts - converts gammu backup to google contacts csv (so you can import it)
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

import ConfigParser
import codecs


class Contact:
    def __init__(self):
        Contact.props = ["Name", "Given Name", "Additional Name", "Family Name", "Yomi Name", "Given Name Yomi", "Additional Name Yomi", "Family Name Yomi", "Name Prefix", "Name Suffix", "Initials", "Nickname", "Short Name", "Maiden Name", "Birthday", "Gender", "Location", "Billing Information", "Directory Server", "Mileage", "Occupation", "Hobby", "Sensitivity", "Priority", "Subject", "Notes", "Group Membership", "E-mail 1 - Type", "E-mail 1 - Value", "Phone 1 - Type", "Phone 1 - Value", "Phone 2 - Type", "Phone 2 - Value", "Phone 3 - Type", "Phone 3 - Value", "Phone 4 - Type", "Phone 4 - Value", "Phone 5 - Type", "Phone 5 - Value", "Address 1 - Type", "Address 1 - Formatted", "Address 1 - Street", "Address 1 - City", "Address 1 - PO Box", "Address 1 - Region", "Address 1 - Postal Code", "Address 1 - Country", "Address 1 - Extended Address", "Organization 1 - Type", "Organization 1 - Name", "Organization 1 - Yomi Name", "Organization 1 - Title", "Organization 1 - Department", "Organization 1 - Symbol", "Organization 1 - Location", "Organization 1 - Job Description", "Website 1 - Type", "Website 1 - Value"]
        self.attrs = {'Group Membership': 'My Contacts'}

    def __str__(self):
        ret = []
        for i in Contact.props:
            ret.append(self.attrs.get(i, ''))
        return ",".join(['"%s"' % i for i in ret])

    def __setitem__(self, k, v):
        if hasattr(self.attrs, k):
            print "warning, attribute '%s' is already set!" % k
        self.attrs[k] = v

    def __getitem__(self, k):
        return self.attrs[k]

    @staticmethod
    def header():
        return ",".join(['"%s"' % i for i in Contact.props])

    @staticmethod
    def fromutf16(s):
        length = len(s) / 4
        pos = 0
        ret = []
        for i in range(length):
            part = s[pos * 4:pos * 4 + 4]
            ret.append(unichr(int("0x" + part[:2] + part[2:], 16)))
            pos += 1
        return "".join(ret)

config = ConfigParser.ConfigParser()
config.read("backup.gammu")

contacts = []
notes = []
for i in config.sections():
    if i == "Backup":
        pass
    elif i.startswith("PhonePBK") or i.startswith("SIMPBK"):
        c = Contact()
        t = None
        phonecounter = 0
        for j in config.options(i):
            if j == "location":
                pass
            elif j.startswith("entry") and j.endswith("type"):
                t = config.get(i, j)
            elif j.startswith("entry") and j.endswith("text"):
                if not t:
                    print "warning, text without type!"
                v = config.get(i, j).decode('utf-8').strip('"')
                if t == "LastName":
                    c["Family Name"] = v
                elif t == "Name":
                    c["Name"] = v
                    c["Family Name"] = v
                elif t == "FirstName":
                    c["Given Name"] = v
                    c["Name"] = "%s %s" % (c["Family Name"], c["Given Name"])
                elif t == "Note":
                    c["Notes"] = v
                elif t == "NumberGeneral":
                    phonecounter += 1
                    c["Phone %d - Type" % phonecounter] = "Other"
                    c["Phone %d - Value" % phonecounter] = v
                elif t == "NumberHome":
                    phonecounter += 1
                    c["Phone %d - Type" % phonecounter] = "Home"
                    c["Phone %d - Value" % phonecounter] = v
                elif t == "NumberMobile":
                    phonecounter += 1
                    c["Phone %d - Type" % phonecounter] = "Mobile"
                    c["Phone %d - Value" % phonecounter] = v
                elif t == "NumberWork":
                    phonecounter += 1
                    c["Phone %d - Type" % phonecounter] = "Work"
                    c["Phone %d - Value" % phonecounter] = v
                elif t == "Email":
                    c["E-mail 1 - Type"] = "Other"
                    c["E-mail 1 - Value"] = v
                elif t == "Custom1":
                    c["Address 1 - Type"] = "Home"
                    c["Address 1 - Extended Address"] = v
                elif t == "NumberMessaging":
                    assert(len(v) == 0)
                else:
                    print "warning, unknown entry type '%s'" % t
                t = None
            elif j.startswith("entry") and j.endswith("number"):
                pass
            else:
                print "warning, unknown option type '%s'" % j
        contacts.append(c)
    elif i.startswith("Calendar"):
        pass
    elif i.startswith("Note"):
        for j in config.options(i):
            if j.endswith("textunicode"):
                v = Contact.fromutf16(config.get(i, j))
                notes.append(v)
    elif i.startswith("Caller"):
        pass
    elif i.startswith("SMSC"):
        pass
    elif i.startswith("TODO"):
        pass
    elif i.startswith("GPRSPoint"):
        pass
    elif i == "Startup":
        pass
    elif i == "Checksum":
        pass
    else:
        print "warning, unknown section type '%s'" % i

with codecs.open("google.csv", mode="w", encoding='utf-16') as sock:
    print >>sock, Contact.header()
    for i in contacts:
        print >>sock, i.__str__()

with codecs.open("notes.txt", mode="w", encoding='utf-16') as sock:
    for i in notes:
        print >>sock, i

# vim:set shiftwidth=4 softtabstop=4 expandtab:
